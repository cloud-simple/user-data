#!/usr/bin/env bash

echo "### === log: tomcat server: setup START"

port_to_listen=59876

sudo -u ubuntu  -i << '_EOF'
cat > ~/.ssh/rc << '_EOF_INTERNAL'
#!/bin/bash

# Fix SSH auth socket location so agent forwarding works with tmux
if test "$SSH_AUTH_SOCK" ; then
    ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
fi
_EOF_INTERNAL
_EOF

hostname="tomcat"
resp=$(curl -s -o /dev/null -w "%{http_code}" http://169.254.169.254/latest/meta-data/tags/instance/Name)
test "${resp}" != "200" || hostname=$(curl -s http://169.254.169.254/latest/meta-data/tags/instance/Name)

hostnamectl set-hostname ${hostname}

apt-get update
apt-get upgrade -y
apt-get install openjdk-11-jre -y

groupadd tomcat
useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat

tomcat9_version=9.0.68
download_url=https://dlcdn.apache.org/tomcat/tomcat-9/v${tomcat9_version}/bin/apache-tomcat-${tomcat9_version}.tar.gz
download_512=https://downloads.apache.org/tomcat/tomcat-9/v${tomcat9_version}/bin/apache-tomcat-${tomcat9_version}.tar.gz.sha512

rm -fr /tmp/user-data
mkdir /tmp/user-data
cd /tmp/user-data

curl -LO ${download_url}
curl -LO ${download_512}

sha512sum -c ./apache-tomcat-${tomcat9_version}.tar.gz.sha512 || { echo "=== err: have not passed checksum verification" ; exit -1 ; }

mkdir -p /opt/tomcat
tar xzvf apache-tomcat-${tomcat9_version}.tar.gz -C /opt/tomcat --strip-components=1

store_dir=/root/tomcat
mkdir -p ${store_dir}

user_file=${store_dir}/user # content: line 1: username; line 2: password
user_name=tomcat-admin
user_pass=$(openssl rand -hex 16)

printf "%s\n%s\n" ${user_name} ${user_pass} > ${user_file}

echo "### === log: tomcat server: config WMI"

cp /opt/tomcat/conf/tomcat-users.xml /opt/tomcat/conf/tomcat-users.xml~
cat > /opt/tomcat/conf/tomcat-users.xml << _EOF
<?xml version="1.0" encoding="UTF-8"?>
<tomcat-users xmlns="http://tomcat.apache.org/xml"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
              version="1.0">
  <user username="${user_name}" password="${user_pass}" roles="manager-gui,admin-gui"/>
</tomcat-users>
_EOF

echo "### === log: tomcat server: config maxPostSize attribute"

cp /opt/tomcat/conf/server.xml /opt/tomcat/conf/server.xml~
cat > /opt/tomcat/conf/server.xml << _EOF
<?xml version="1.0" encoding="UTF-8"?>
<Server port="8005" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
  </GlobalNamingResources>

  <Service name="Catalina">
    <Connector port="${port_to_listen}" protocol="HTTP/1.1"
               connectionTimeout="20000"
	       redirectPort="8443"
	       maxPostSize="35728640" />

    <Engine name="Catalina" defaultHost="localhost">
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/>
      </Realm>

      <Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true">
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
      </Host>
    </Engine>
  </Service>
</Server>
_EOF

echo "### === log: tomcat server: config environment variables"

cp /opt/tomcat/bin/catalina.sh /opt/tomcat/bin/catalina.sh~
sed \
    -e '/^#!.*/a export CCPD_CONFIG_FILE="/opt/tomcat/ccpd-config.yml"' \
    -e '/^#!.*/a export CCPD_LOG_DIR="/opt/tomcat/logs"' \
    /opt/tomcat/bin/catalina.sh~ > /opt/tomcat/bin/catalina.sh

echo "### === log: tomcat server: config JVM heap settings, UTF-8 character encoding"

cat >> /opt/tomcat/bin/setenv.sh << _EOF
export CATALINA_OPTS="-Xms1024M -Xmx2048M -Dfile.encoding=UTF-8"
_EOF

echo "### === log: tomcat server: config remove default applications"

rm -fR /opt/tomcat/webapps/*

echo "### === log: tomcat server: config modify property file"

cp /opt/tomcat/conf/catalina.properties /opt/tomcat/conf/catalina.properties~
sed \
    -e '/^tomcat.util.scan.StandardJarScanFilter.jarsToSkip.*/a bcprov*.jar,\\' \
    /opt/tomcat/conf/catalina.properties~ > /opt/tomcat/conf/catalina.properties

echo "### === log: tomcat server: config cacheMaxSize"

cp /opt/tomcat/conf/context.xml /opt/tomcat/conf/context.xml~
cat > /opt/tomcat/conf/context.xml << '_EOF'
<?xml version="1.0" encoding="UTF-8"?>
<Context>
    <Resources cacheMaxSize="51200" />

    <WatchedResource>WEB-INF/web.xml</WatchedResource>
    <WatchedResource>WEB-INF/tomcat-web.xml</WatchedResource>
    <WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>

    <!-- Uncomment this to disable session persistence across Tomcat restarts -->
    <!--
    <Manager pathname="" />
    -->
</Context>
_EOF

### uncomment the following to test server setup using sample app (it will be accessible as http(s)://<host>:<port>/sample/)
#cd /opt/tomcat/webapps
#curl -LO https://tomcat.apache.org/tomcat-9.0-doc/appdev/sample/sample.war
#chgrp tomcat sample.war

echo "### === log: tomcat server: config permissions"

mkdir -p /opt/tomcat/legacy/{source,processed,error}

chgrp -R tomcat /opt/tomcat/

chmod g+x /opt/tomcat/conf/
chmod -R g+r /opt/tomcat/conf/

chmod -R g+w /opt/tomcat/logs/ /opt/tomcat/legacy/ /opt/tomcat/temp/ /opt/tomcat/webapps/ /opt/tomcat/work/ /opt/tomcat/conf/

echo "### === log: tomcat server: config systemd unit"

cat > /etc/systemd/system/tomcat.service << _EOF
[Unit]
Description=Apache Tomcat Web Application Container
After=network.target

[Service]
Type=forking

Environment=JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64
Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'

ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh

User=tomcat
Group=tomcat
UMask=0007
RestartSec=10
Restart=always

[Install]
WantedBy=multi-user.target
_EOF

systemctl daemon-reload
systemctl enable tomcat
systemctl start tomcat

echo "### === log: tomcat server: setup DONE"

echo "### === log: CCDP: deploy START"

### get CCPD.war
# In case this script is run on remote server connected via SSH.
#   E.g. this file can be copied to 'ubuntu' user home directory
#   as '~/user-data.sh'. The script should be run using 'sudo'
#   with a keys '-H' (to set the HOME environment variable to the
#   home directory specified by the target user's) and
#   '--preserve-env=SSH_AUTH_SOCK' (to keep the
#   'SSH_AUTH_SOCK' environment variable for agent forwarding).
#   It is possible to use 'git clone git@github.com:cloud-simple/storage.git'
#   within the script then and access SSH keys forwarded to remote
#   SSH agent. The comand can look like:
#   'sudo -H --preserve-env=SSH_AUTH_SOCK ~/user-data.sh'. Try this
#   method initially and if it doesn't work proceed with the next one.
# In case this script is passed to cloud instance as 'useer-data'.
#   Try to get PAT (personal access token) for 'cloud-simple'
#   github.com account and use it to access the private
#   github repo. E.g. the secret (PAT) can be passed to AWS EC2
#   instance with help of AWS Secret Manager. Or use any other
#   secure ways. Try this method as the second attempt.
# If no one from the above attempts does work, just stop here
#   without CCPD deployment (set 'deploy_flag' to 'false')

deploy_flag="true"

ssh-keyscan 172.31.8.104 >> ~/.ssh/known_hosts
ssh -o ConnectTimeout=2 -q ubuntu@172.31.8.104 'exit'
if [ $? -eq 0 ]; then
  scp ubuntu@172.31.8.104:~/download/CCPD.war /tmp
  scp ubuntu@172.31.8.104:~/download/ccpd-config.yml /tmp
fi

test -f /tmp/CCPD.war || deploy_flag="false"
test -f /tmp/ccpd-config.yml || deploy_flag="false"

if [ "${deploy_flag}" == "false" ]; then
  apt-get install git-lfs -y

  git config --global user.email "cloud-simple@tilson.biz"
  git config --global user.name "cloud-simple"
  git lfs install

  ssh-keyscan github.com >> ~/.ssh/known_hosts
  rm -fr /tmp/storage
  git clone git@github.com:cloud-simple/storage.git /tmp/storage

  cp /tmp/storage/ciscat/CCPD.war /tmp
  cp /tmp/storage/ciscat/ccpd-config.yml /tmp
fi

test -f /tmp/CCPD.war || deploy_flag="false"
test -f /tmp/ccpd-config.yml || deploy_flag="false"

test "${deploy_flag}" == "true" || { echo "### === wrn: there is no way to access private repo with CCDP app; exiting" ; exit 0 ; }

systemctl stop tomcat

cp /tmp/CCPD.war /opt/tomcat/webapps/
chown tomcat:tomcat /opt/tomcat/webapps/CCPD.war
chmod 750 /opt/tomcat/webapps/CCPD.war

cp /tmp/ccpd-config.yml /opt/tomcat/
chown tomcat:tomcat /opt/tomcat/ccpd-config.yml
chmod 600 /opt/tomcat/ccpd-config.yml

systemctl start tomcat

echo "### === log: CCDP: deploy DONE"
